jobs:
- job: BaseTests
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    - name: NUMBA_DISABLE_JIT
      value: 1
  timeoutInMinutes: 360
  strategy:
    matrix:
      Python_38:
        python.version: 3.8
        name: "Python 3.8"
      Python_37:
        python.version: 3.7
        name: "Python 3.7"
      Python_36:
        python.version: 3.6
        name: "Python 3.6"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      sudo apt-get update
      sudo apt-get install -y ffmpeg
    displayName: 'Install external libraries'

  - script: |
      ls -ahl
      env
      pwd
      gcc --version
      python --version
    displayName: 'Debug information'

  - script: |
      python -m pip install  --no-cache-dir -r requirements.txt
      python -m pip install --no-cache-dir -r requirements-optional.txt
      python -m pip install --no-cache-dir -r requirements-dev.txt
      python -m pip install pytest-azurepipelines
    displayName: 'Install requirements'

  - script: |
      python -m pip install .
    displayName: 'Install ArviZ package'

  - script: |
      python -m pip freeze
    displayName: 'Print packages'

  - script: |
      python -m pytest arviz/tests/base_tests --cov arviz --cov-report html
    displayName: 'pytest'

  - script: |
      ls -ahl
      env
    displayName: 'Debug information 2'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: JaCoCo
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'


- job: BuildWheel
  dependsOn:
    - BaseTests
    - ExternalTests
  condition: succeeded() # and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    - name: NUMBA_DISABLE_JIT
      value: 1
  timeoutInMinutes: 360
  strategy:
    matrix:
      Python_38:
        python.version: 3.8
        name: "Python 3.8 - wheel"

  - script: |
      # if [[ $(BUILD_SOURCEBRANCH) == ref/tags/* ]]; then
      python -m venv wheel_env --copies --clear
      source ./wheel_env/bin/activate
      which python
      python -m pip install --upgrade pip
      python -m pip install -r requirements.txt
      python setup.py sdist bdist_wheel
      cd dist
      ls -lh
      # try to install and import the wheel
      ls | grep *.whl | xargs python -m pip install
      python -c "import arviz; print(arviz)"
      cd ..
      tar -zcf arviz_dist.tar.gz dist
    displayName: 'Build a wheel'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'arviz_dist.tar.gz'
      artifactName: 'arviz_dist.tar.gz'
